// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _YuckLexer.flex

package com.github.h3rmt.intellijyuck;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.h3rmt.intellijyuck.psi.YuckTypes.*;
import static com.github.h3rmt.intellijyuck.psi.YuckTokenTypes.*;


public class _YuckLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\0"+
    "\1\3\4\0\1\4\1\5\1\6\3\0\1\7\1\10"+
    "\1\0\11\11\1\12\1\13\1\14\5\0\24\15\1\16"+
    "\5\15\1\17\1\20\1\21\1\0\1\15\1\0\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\15\1\33\1\34\1\35\1\36\1\37\1\15\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\15"+
    "\12\0\1\1\32\0\1\1\11\0\1\15\12\0\1\15"+
    "\4\0\1\15\5\0\27\15\1\0\37\15\1\0\u01ca\15"+
    "\4\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15"+
    "\201\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15"+
    "\6\0\1\15\1\0\3\15\1\0\1\15\1\0\24\15"+
    "\1\0\123\15\1\0\213\15\10\0\246\15\1\0\46\15"+
    "\2\0\1\15\6\0\51\15\107\0\33\15\4\0\4\15"+
    "\55\0\53\15\25\0\12\50\4\0\2\15\1\0\143\15"+
    "\1\0\1\15\17\0\2\15\7\0\2\15\12\50\3\15"+
    "\2\0\1\15\20\0\1\15\1\0\36\15\35\0\131\15"+
    "\13\0\1\15\16\0\12\50\41\15\11\0\2\15\4\0"+
    "\1\15\5\0\26\15\4\0\1\15\11\0\1\15\3\0"+
    "\1\15\27\0\31\15\7\0\13\15\65\0\25\15\1\0"+
    "\10\15\106\0\66\15\3\0\1\15\22\0\1\15\7\0"+
    "\12\15\4\0\12\50\1\0\20\15\4\0\10\15\2\0"+
    "\2\15\2\0\26\15\1\0\7\15\1\0\1\15\3\0"+
    "\4\15\3\0\1\15\20\0\1\15\15\0\2\15\1\0"+
    "\3\15\4\0\12\50\2\15\12\0\1\15\10\0\6\15"+
    "\4\0\2\15\2\0\26\15\1\0\7\15\1\0\2\15"+
    "\1\0\2\15\1\0\2\15\37\0\4\15\1\0\1\15"+
    "\7\0\12\50\2\0\3\15\20\0\11\15\1\0\3\15"+
    "\1\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15"+
    "\3\0\1\15\22\0\1\15\17\0\2\15\4\0\12\50"+
    "\11\0\1\15\13\0\10\15\2\0\2\15\2\0\26\15"+
    "\1\0\7\15\1\0\2\15\1\0\5\15\3\0\1\15"+
    "\36\0\2\15\1\0\3\15\4\0\12\50\1\0\1\15"+
    "\21\0\1\15\1\0\6\15\3\0\3\15\1\0\4\15"+
    "\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15"+
    "\3\0\3\15\3\0\14\15\26\0\1\15\25\0\12\50"+
    "\25\0\10\15\1\0\3\15\1\0\27\15\1\0\20\15"+
    "\3\0\1\15\32\0\3\15\5\0\2\15\4\0\12\50"+
    "\20\0\1\15\4\0\10\15\1\0\3\15\1\0\27\15"+
    "\1\0\12\15\1\0\5\15\3\0\1\15\40\0\1\15"+
    "\1\0\2\15\4\0\12\50\1\0\2\15\22\0\10\15"+
    "\1\0\3\15\1\0\51\15\2\0\1\15\20\0\1\15"+
    "\5\0\3\15\10\0\3\15\4\0\12\50\12\0\6\15"+
    "\5\0\22\15\3\0\30\15\1\0\11\15\1\0\1\15"+
    "\2\0\7\15\37\0\12\50\21\0\60\15\1\0\2\15"+
    "\14\0\7\15\11\0\12\50\47\0\2\15\1\0\1\15"+
    "\1\0\5\15\1\0\30\15\1\0\1\15\1\0\12\15"+
    "\1\0\2\15\11\0\1\15\2\0\5\15\1\0\1\15"+
    "\11\0\12\50\2\0\4\15\40\0\1\15\37\0\12\50"+
    "\26\0\10\15\1\0\44\15\33\0\5\15\163\0\53\15"+
    "\24\0\1\15\12\50\6\0\6\15\4\0\4\15\3\0"+
    "\1\15\3\0\2\15\7\0\3\15\4\0\15\15\14\0"+
    "\1\15\1\0\12\50\6\0\46\15\1\0\1\15\5\0"+
    "\1\15\2\0\53\15\1\0\115\15\1\0\4\15\2\0"+
    "\7\15\1\0\1\15\1\0\4\15\2\0\51\15\1\0"+
    "\4\15\2\0\41\15\1\0\4\15\2\0\7\15\1\0"+
    "\1\15\1\0\4\15\2\0\17\15\1\0\71\15\1\0"+
    "\4\15\2\0\103\15\45\0\20\15\20\0\126\15\2\0"+
    "\6\15\3\0\u016c\15\2\0\21\15\1\1\32\15\5\0"+
    "\113\15\6\0\10\15\7\0\15\15\1\0\4\15\16\0"+
    "\22\15\16\0\22\15\16\0\15\15\1\0\3\15\17\0"+
    "\64\15\43\0\1\15\4\0\1\15\3\0\12\50\46\0"+
    "\12\50\6\0\131\15\7\0\5\15\2\0\42\15\1\0"+
    "\1\15\5\0\106\15\12\0\37\15\47\0\12\50\36\15"+
    "\2\0\5\15\13\0\54\15\4\0\32\15\6\0\12\50"+
    "\46\0\27\15\11\0\65\15\53\0\12\50\6\0\12\50"+
    "\15\0\1\15\135\0\57\15\21\0\7\15\4\0\12\50"+
    "\51\0\36\15\15\0\2\15\12\50\54\15\32\0\44\15"+
    "\34\0\12\50\3\0\3\15\12\50\44\15\2\0\11\15"+
    "\7\0\53\15\2\0\3\15\51\0\4\15\1\0\6\15"+
    "\1\0\2\15\3\0\1\15\5\0\300\15\100\0\26\15"+
    "\2\0\6\15\2\0\46\15\2\0\6\15\2\0\10\15"+
    "\1\0\1\15\1\0\1\15\1\0\1\15\1\0\37\15"+
    "\2\0\65\15\1\0\7\15\1\0\1\15\3\0\3\15"+
    "\1\0\7\15\3\0\4\15\2\0\6\15\4\0\15\15"+
    "\5\0\3\15\1\0\7\15\3\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\21\0\1\15\15\0\1\15"+
    "\20\0\15\15\145\0\1\15\4\0\1\15\2\0\12\15"+
    "\1\0\1\15\3\0\5\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\4\15\1\0\13\15\2\0\4\15"+
    "\5\0\5\15\4\0\1\15\64\0\2\15\u017b\0\57\15"+
    "\1\0\57\15\1\0\205\15\6\0\4\15\3\0\2\15"+
    "\14\0\46\15\1\0\1\15\5\0\1\15\2\0\70\15"+
    "\7\0\1\15\20\0\27\15\11\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\7\15\120\0\1\15\320\0\1\1"+
    "\4\0\2\15\52\0\5\15\5\0\2\15\4\0\126\15"+
    "\6\0\3\15\1\0\132\15\1\0\4\15\5\0\53\15"+
    "\1\0\136\15\21\0\33\15\65\0\306\15\112\0\360\15"+
    "\20\0\215\15\103\0\56\15\2\0\15\15\3\0\20\15"+
    "\12\50\2\15\24\0\57\15\20\0\37\15\2\0\106\15"+
    "\61\0\11\15\2\0\147\15\2\0\65\15\2\0\5\15"+
    "\60\0\13\15\1\0\3\15\1\0\4\15\1\0\27\15"+
    "\35\0\64\15\16\0\62\15\34\0\12\50\30\0\6\15"+
    "\3\0\1\15\1\0\2\15\1\0\12\50\34\15\12\0"+
    "\27\15\31\0\35\15\7\0\57\15\34\0\1\15\12\50"+
    "\6\0\5\15\1\0\12\15\12\50\5\15\1\0\51\15"+
    "\27\0\3\15\1\0\10\15\4\0\12\50\6\0\27\15"+
    "\3\0\1\15\3\0\62\15\1\0\1\15\3\0\2\15"+
    "\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15"+
    "\2\0\13\15\7\0\3\15\14\0\6\15\2\0\6\15"+
    "\2\0\6\15\11\0\7\15\1\0\7\15\1\0\53\15"+
    "\1\0\14\15\10\0\163\15\15\0\12\50\6\0\244\15"+
    "\14\0\27\15\4\0\61\15\4\0\156\15\2\0\152\15"+
    "\46\0\7\15\14\0\5\15\5\0\1\15\1\0\12\15"+
    "\1\0\15\15\1\0\5\15\1\0\1\15\1\0\2\15"+
    "\1\0\2\15\1\0\154\15\41\0\153\15\22\0\100\15"+
    "\2\0\66\15\50\0\14\15\164\0\5\15\1\0\207\15"+
    "\23\0\12\50\7\0\32\15\6\0\32\15\13\0\131\15"+
    "\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15"+
    "\43\0\14\15\1\0\32\15\1\0\23\15\1\0\2\15"+
    "\1\0\17\15\2\0\16\15\42\0\173\15\205\0\35\15"+
    "\3\0\61\15\57\0\40\15\15\0\24\15\1\0\10\15"+
    "\6\0\46\15\12\0\36\15\2\0\44\15\4\0\10\15"+
    "\60\0\236\15\2\0\12\50\6\0\44\15\4\0\44\15"+
    "\4\0\50\15\10\0\64\15\234\0\67\15\11\0\26\15"+
    "\12\0\10\15\230\0\6\15\2\0\1\15\1\0\54\15"+
    "\1\0\2\15\3\0\1\15\2\0\27\15\12\0\27\15"+
    "\11\0\37\15\101\0\23\15\1\0\2\15\12\0\26\15"+
    "\12\0\32\15\106\0\70\15\6\0\2\15\100\0\1\15"+
    "\17\0\4\15\1\0\3\15\1\0\35\15\52\0\35\15"+
    "\3\0\35\15\43\0\10\15\1\0\34\15\33\0\66\15"+
    "\12\0\26\15\12\0\23\15\15\0\22\15\156\0\111\15"+
    "\67\0\63\15\15\0\63\15\15\0\44\15\14\0\12\50"+
    "\306\0\35\15\12\0\1\15\10\0\26\15\232\0\27\15"+
    "\14\0\65\15\56\0\12\50\23\0\55\15\40\0\31\15"+
    "\7\0\12\50\11\0\44\15\17\0\12\50\4\0\1\15"+
    "\13\0\43\15\3\0\1\15\14\0\60\15\16\0\4\15"+
    "\13\0\12\50\1\15\1\0\1\15\43\0\22\15\1\0"+
    "\31\15\124\0\7\15\1\0\1\15\1\0\4\15\1\0"+
    "\17\15\1\0\12\15\7\0\57\15\21\0\12\50\13\0"+
    "\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0"+
    "\2\15\1\0\5\15\3\0\1\15\22\0\1\15\14\0"+
    "\5\15\236\0\65\15\22\0\4\15\5\0\12\50\5\0"+
    "\1\15\40\0\60\15\24\0\2\15\1\0\1\15\10\0"+
    "\12\50\246\0\57\15\51\0\4\15\44\0\60\15\24\0"+
    "\1\15\13\0\12\50\46\0\53\15\15\0\1\15\7\0"+
    "\12\50\66\0\33\15\25\0\12\50\306\0\54\15\164\0"+
    "\100\15\12\50\25\0\1\15\240\0\10\15\2\0\47\15"+
    "\20\0\1\15\1\0\1\15\34\0\1\15\12\0\50\15"+
    "\7\0\1\15\25\0\1\15\13\0\56\15\23\0\1\15"+
    "\42\0\71\15\7\0\11\15\1\0\45\15\21\0\1\15"+
    "\17\0\12\50\30\0\36\15\160\0\7\15\1\0\2\15"+
    "\1\0\46\15\25\0\1\15\11\0\12\50\6\0\6\15"+
    "\1\0\2\15\1\0\40\15\16\0\1\15\7\0\12\50"+
    "\u0136\0\23\15\15\0\232\15\346\0\304\15\274\0\57\15"+
    "\321\0\107\15\271\0\71\15\7\0\37\15\1\0\12\50"+
    "\146\0\36\15\22\0\60\15\20\0\4\15\14\0\12\50"+
    "\11\0\25\15\5\0\23\15\260\0\100\15\200\0\113\15"+
    "\5\0\1\15\102\0\15\15\100\0\2\15\1\0\1\15"+
    "\34\0\370\15\10\0\363\15\15\0\37\15\61\0\3\15"+
    "\21\0\4\15\10\0\u018c\15\4\0\153\15\5\0\15\15"+
    "\3\0\11\15\7\0\12\15\146\0\125\15\1\0\107\15"+
    "\1\0\2\15\2\0\1\15\2\0\2\15\2\0\4\15"+
    "\1\0\14\15\1\0\1\15\1\0\7\15\1\0\101\15"+
    "\1\0\4\15\2\0\10\15\1\0\7\15\1\0\34\15"+
    "\1\0\4\15\1\0\5\15\1\0\1\15\3\0\7\15"+
    "\1\0\u0154\15\2\0\31\15\1\0\31\15\1\0\37\15"+
    "\1\0\31\15\1\0\37\15\1\0\31\15\1\0\37\15"+
    "\1\0\31\15\1\0\37\15\1\0\31\15\1\0\10\15"+
    "\2\0\62\50\55\15\12\0\7\15\2\0\12\50\4\0"+
    "\1\15\u0171\0\54\15\4\0\12\50\6\0\305\15\73\0"+
    "\104\15\7\0\1\15\4\0\12\50\246\0\4\15\1\0"+
    "\33\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0"+
    "\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0"+
    "\1\15\4\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\3\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\2\15\1\0\1\15\2\0\4\15\1\0\7\15\1\0"+
    "\4\15\1\0\4\15\1\0\1\15\1\0\12\15\1\0"+
    "\21\15\5\0\3\15\1\0\5\15\1\0\21\15\104\0"+
    "\327\15\51\0\65\15\13\0\336\15\2\0\u0182\15\16\0"+
    "\u0131\15\37\0\36\15\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\1\1\11\1\12\1\13\6\7\1\0"+
    "\1\14\16\0\6\7\1\15\23\0\1\16\5\7\2\0"+
    "\1\17\21\0\4\7\1\20\7\0\1\21\13\0\3\7"+
    "\1\22\1\0\1\23\11\0\1\24\5\0\1\25\1\0"+
    "\4\7\1\26\1\0\1\27\1\30\10\0\1\31\3\0"+
    "\4\7\1\0\1\32\1\33\3\0\1\34\1\35\1\36"+
    "\1\37\1\40\1\0\3\7\1\41\1\42\1\43\3\0"+
    "\1\7\1\44\1\45\2\0\1\46\1\7\2\0\1\7"+
    "\1\47\1\0\1\7\1\50\1\7\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\51\0\51\0\51\0\244"+
    "\0\315\0\366\0\u011f\0\u0148\0\51\0\51\0\u0171\0\u019a"+
    "\0\u01c3\0\u01ec\0\u0215\0\u023e\0\173\0\51\0\u0267\0\u0290"+
    "\0\315\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0290\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616"+
    "\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e"+
    "\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\244\0\u087d"+
    "\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\51\0\u099c"+
    "\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\244\0\u0cf9\0\u0d22\0\u0d4b"+
    "\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\51\0\u0e18\0\u0e41\0\u0e6a"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\u1004\0\u102d\0\244\0\u1056\0\51\0\u107f\0\u10a8"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\51"+
    "\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\51\0\u12bd\0\u12e6"+
    "\0\u130f\0\u1338\0\u1361\0\51\0\u138a\0\51\0\51\0\u13b3"+
    "\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2\0\51"+
    "\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a"+
    "\0\51\0\51\0\u1643\0\u166c\0\u1695\0\51\0\51\0\51"+
    "\0\51\0\51\0\u16be\0\u16e7\0\u1710\0\u1739\0\244\0\51"+
    "\0\51\0\u1762\0\u178b\0\u17b4\0\u17dd\0\244\0\244\0\u1806"+
    "\0\u182f\0\51\0\u1858\0\u1881\0\u18aa\0\u18d3\0\51\0\u18fc"+
    "\0\u1925\0\51\0\u194e\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\2\10\1\15\1\2\1\16\1\10"+
    "\1\17\1\20\1\21\1\22\1\23\12\10\1\24\5\10"+
    "\1\2\52\0\2\3\46\0\3\25\1\26\14\25\1\27"+
    "\30\25\7\0\1\10\1\0\2\10\2\0\2\10\3\0"+
    "\27\10\11\0\2\30\46\0\1\31\2\12\60\0\1\32"+
    "\1\0\1\33\1\0\1\34\2\0\1\35\2\0\1\36"+
    "\1\37\1\40\2\0\1\41\1\42\1\0\1\43\1\44"+
    "\3\0\2\14\1\0\46\14\7\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\14\10\1\45\12\10\7\0\1\10"+
    "\1\0\2\10\2\0\2\10\3\0\14\10\1\46\12\10"+
    "\7\0\1\10\1\0\2\10\2\0\2\10\3\0\4\10"+
    "\1\47\22\10\7\0\1\10\1\0\2\10\2\0\2\10"+
    "\3\0\24\10\1\50\2\10\7\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\1\51\26\10\7\0\1\10\1\0"+
    "\2\10\2\0\2\10\3\0\16\10\1\52\10\10\3\0"+
    "\1\25\5\0\1\25\4\0\1\25\1\0\1\25\1\0"+
    "\2\25\2\0\2\25\5\0\1\25\2\0\1\25\1\0"+
    "\3\25\1\0\1\25\13\0\2\53\62\0\1\54\57\0"+
    "\1\55\5\0\1\56\55\0\1\57\24\0\1\60\3\0"+
    "\1\61\60\0\1\62\34\0\1\63\63\0\1\64\2\0"+
    "\1\65\47\0\1\66\2\0\1\67\40\0\1\70\3\0"+
    "\1\71\34\0\1\72\3\0\1\73\3\0\1\74\50\0"+
    "\1\75\1\0\1\76\23\0\1\10\1\0\2\10\2\0"+
    "\2\10\3\0\24\10\1\77\2\10\7\0\1\10\1\0"+
    "\2\10\2\0\2\10\3\0\12\10\1\100\14\10\7\0"+
    "\1\10\1\0\2\10\2\0\2\10\3\0\5\10\1\101"+
    "\21\10\7\0\1\10\1\0\2\10\2\0\2\10\3\0"+
    "\15\10\1\102\11\10\7\0\1\10\1\0\2\10\2\0"+
    "\2\10\3\0\11\10\1\103\15\10\7\0\1\10\1\0"+
    "\2\10\2\0\2\10\3\0\21\10\1\104\5\10\42\0"+
    "\1\105\30\0\1\106\67\0\1\107\46\0\1\110\44\0"+
    "\1\111\47\0\1\112\13\0\1\113\37\0\1\114\47\0"+
    "\1\115\40\0\1\116\56\0\1\117\40\0\1\120\75\0"+
    "\1\121\35\0\1\122\52\0\1\123\45\0\1\124\63\0"+
    "\1\125\43\0\1\126\34\0\1\127\32\0\1\130\50\0"+
    "\1\10\1\0\2\10\2\0\2\10\3\0\1\10\1\131"+
    "\25\10\7\0\1\10\1\0\2\10\2\0\2\10\3\0"+
    "\23\10\1\132\3\10\7\0\1\10\1\0\2\10\2\0"+
    "\2\10\3\0\1\133\26\10\7\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\17\10\1\134\7\10\7\0\1\10"+
    "\1\0\2\10\2\0\2\10\3\0\4\10\1\135\22\10"+
    "\32\0\1\136\57\0\1\137\31\0\1\140\60\0\1\141"+
    "\46\0\1\142\57\0\1\143\43\0\1\144\44\0\1\145"+
    "\53\0\1\146\45\0\1\147\46\0\1\150\57\0\1\151"+
    "\43\0\1\152\55\0\1\153\47\0\1\154\55\0\1\155"+
    "\43\0\1\156\60\0\1\157\40\0\1\160\25\0\1\10"+
    "\1\0\2\10\2\0\2\10\3\0\14\10\1\161\12\10"+
    "\7\0\1\10\1\0\2\10\2\0\2\10\3\0\10\10"+
    "\1\162\16\10\7\0\1\10\1\0\2\10\2\0\2\10"+
    "\3\0\13\10\1\163\13\10\7\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\4\10\1\164\22\10\44\0\1\165"+
    "\45\0\1\166\44\0\1\167\43\0\1\170\51\0\1\171"+
    "\41\0\1\172\70\0\1\173\30\0\1\174\63\0\1\175"+
    "\41\0\1\176\3\0\1\177\44\0\1\200\60\0\1\201"+
    "\54\0\1\202\36\0\1\203\42\0\1\204\51\0\1\205"+
    "\56\0\1\206\47\0\1\207\27\0\1\210\1\0\2\10"+
    "\2\0\2\10\3\0\27\10\7\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\3\10\1\211\7\10\1\212\13\10"+
    "\7\0\1\10\1\0\2\10\2\0\2\10\3\0\3\10"+
    "\1\213\23\10\26\0\1\214\47\0\1\215\60\0\1\216"+
    "\55\0\1\217\43\0\1\220\51\0\1\221\47\0\1\222"+
    "\55\0\1\223\15\0\1\224\76\0\1\225\56\0\1\226"+
    "\37\0\1\227\53\0\1\230\50\0\1\231\46\0\1\232"+
    "\52\0\1\233\22\0\1\10\1\0\2\10\2\0\2\10"+
    "\3\0\1\10\1\234\25\10\7\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\6\10\1\235\20\10\7\0\1\10"+
    "\1\0\2\10\2\0\2\10\3\0\3\10\1\236\23\10"+
    "\7\0\1\10\1\0\2\10\2\0\2\10\3\0\4\10"+
    "\1\237\22\10\26\0\1\240\47\0\1\241\63\0\1\242"+
    "\40\0\1\243\42\0\1\244\54\0\1\245\52\0\1\246"+
    "\62\0\1\247\45\0\1\250\36\0\1\251\51\0\1\252"+
    "\60\0\1\253\21\0\1\10\1\0\2\10\2\0\2\10"+
    "\3\0\14\10\1\254\12\10\7\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\4\10\1\255\22\10\7\0\1\10"+
    "\1\0\2\10\2\0\2\10\3\0\14\10\1\256\12\10"+
    "\7\0\1\10\1\0\2\10\2\0\2\10\3\0\16\10"+
    "\1\257\10\10\25\0\1\260\51\0\1\261\64\0\1\262"+
    "\52\0\1\263\44\0\1\264\17\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\24\10\1\265\2\10\7\0\1\10"+
    "\1\0\2\10\2\0\2\10\3\0\20\10\1\266\6\10"+
    "\7\0\1\10\1\0\2\10\2\0\2\10\3\0\23\10"+
    "\1\267\3\10\32\0\1\270\44\0\1\271\50\0\1\272"+
    "\31\0\1\273\1\0\2\10\2\0\2\10\3\0\27\10"+
    "\36\0\1\274\47\0\1\275\22\0\1\10\1\0\2\10"+
    "\2\0\2\10\3\0\20\10\1\276\6\10\35\0\1\277"+
    "\46\0\1\300\24\0\1\10\1\0\2\10\2\0\2\10"+
    "\3\0\4\10\1\301\22\10\47\0\1\302\10\0\1\10"+
    "\1\0\2\10\2\0\2\10\3\0\24\10\1\303\2\10"+
    "\7\0\1\10\1\0\2\10\2\0\2\10\3\0\20\10"+
    "\1\304\6\10";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6519];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\5\1\2\11\6\1\1\0"+
    "\1\11\16\0\7\1\23\0\6\1\2\0\1\11\21\0"+
    "\5\1\7\0\1\11\13\0\4\1\1\0\1\11\11\0"+
    "\1\11\5\0\1\11\1\0\4\1\1\11\1\0\2\11"+
    "\10\0\1\11\3\0\4\1\1\0\2\11\3\0\5\11"+
    "\1\0\4\1\2\11\3\0\3\1\2\0\1\11\1\1"+
    "\2\0\1\1\1\11\1\0\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _YuckLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YuckLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 42: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 43: break;
          case 3:
            { return DOUBLE_QUOTE;
            }
          // fall through
          case 44: break;
          case 4:
            { return SINGLE_QUOTE;
            }
          // fall through
          case 45: break;
          case 5:
            { return LPAREN;
            }
          // fall through
          case 46: break;
          case 6:
            { return RPAREN;
            }
          // fall through
          case 47: break;
          case 7:
            { return IDENTIFIER;
            }
          // fall through
          case 48: break;
          case 8:
            { return INT;
            }
          // fall through
          case 49: break;
          case 9:
            { return LINE_COMMENT;
            }
          // fall through
          case 50: break;
          case 10:
            { return LBRACKET;
            }
          // fall through
          case 51: break;
          case 11:
            { return RBRACKET;
            }
          // fall through
          case 52: break;
          case 12:
            { return STRING;
            }
          // fall through
          case 53: break;
          case 13:
            { return FLOAT;
            }
          // fall through
          case 54: break;
          case 14:
            { return BOX;
            }
          // fall through
          case 55: break;
          case 15:
            { return CSSPROP;
            }
          // fall through
          case 56: break;
          case 16:
            { return TRUE;
            }
          // fall through
          case 57: break;
          case 17:
            { return NAMEPROP;
            }
          // fall through
          case 58: break;
          case 18:
            { return FALSE;
            }
          // fall through
          case 59: break;
          case 19:
            { return CLASSPROP;
            }
          // fall through
          case 60: break;
          case 20:
            { return STYLEPROP;
            }
          // fall through
          case 61: break;
          case 21:
            { return WIDTHPROP;
            }
          // fall through
          case 62: break;
          case 22:
            { return ACTIVEPROP;
            }
          // fall through
          case 63: break;
          case 23:
            { return HALIGNPROP;
            }
          // fall through
          case 64: break;
          case 24:
            { return HEIGHTPROP;
            }
          // fall through
          case 65: break;
          case 25:
            { return VALIGNPROP;
            }
          // fall through
          case 66: break;
          case 26:
            { return HEXPANDPROP;
            }
          // fall through
          case 67: break;
          case 27:
            { return MONITORPROP;
            }
          // fall through
          case 68: break;
          case 28:
            { return SPACINGPROP;
            }
          // fall through
          case 69: break;
          case 29:
            { return TIMEOUTPROP;
            }
          // fall through
          case 70: break;
          case 30:
            { return TOOLTIPPROP;
            }
          // fall through
          case 71: break;
          case 31:
            { return VEXPANDPROP;
            }
          // fall through
          case 72: break;
          case 32:
            { return VISIBLEPROP;
            }
          // fall through
          case 73: break;
          case 33:
            { return EXPANDER;
            }
          // fall through
          case 74: break;
          case 34:
            { return EXPANDEDPROP;
            }
          // fall through
          case 75: break;
          case 35:
            { return ONCHANGEPROP;
            }
          // fall through
          case 76: break;
          case 36:
            { return DEFWIDGET;
            }
          // fall through
          case 77: break;
          case 37:
            { return DEFWINDOW;
            }
          // fall through
          case 78: break;
          case 38:
            { return WMIGNOREPROP;
            }
          // fall through
          case 79: break;
          case 39:
            { return ORIENTATIONPROP;
            }
          // fall through
          case 80: break;
          case 40:
            { return SPACEEVENLYPROP;
            }
          // fall through
          case 81: break;
          case 41:
            { return COMBOBOXTEXT;
            }
          // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
